---
import ReferenceIO from './reference-io.astro';

interface Props {
	options: {
		extends?: Array<{ name: string; link: string }>;
		properties?: {
			name: string;
			type: string;
			description: string;
		}[];
	};
}

const { options } = Astro.props;

function getExtendsContent(extends_: Array<{ name: string; link: string }>) {
	if (extends_.length === 1) {
		return [extends_[0]] as Array<{ name?: string; link?: string; isComma?: boolean; isAnd?: boolean }>;
	}

	if (extends_.length === 2) {
		return [extends_[0], { isAnd: true }, extends_[1]] as Array<{
			name?: string;
			link?: string;
			isComma?: boolean;
			isAnd?: boolean;
		}>;
	}

	return extends_.reduce(
		(acc, ext, index) => {
			if (index === extends_.length - 1) {
				acc.push({ isAnd: true }, ext);
			} else {
				acc.push(ext, { isComma: true });
			}
			return acc;
		},
		[] as Array<{ name?: string; link?: string; isComma?: boolean; isAnd?: boolean }>,
	);
}
---

<h2 id="options">Options</h2>

{
	options.extends ? (
		<p>
			<code>options</code> input accepts any properties from{' '}
			{getExtendsContent(options.extends).map((item) => {
				if (item.isComma) return ', ';
				if (item.isAnd) return ' and ';
				return (
					<a href={item.link} target="_blank" rel="noreferrer">
						<code>{item.name}</code>
					</a>
				);
			})}
			{options.properties?.length ? <span>in addition to the following:</span> : null}
		</p>
	) : null
}

{options.properties ? <ReferenceIO subtitle="Properties" items={options.properties} /> : null}
