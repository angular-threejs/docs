/**Auto-generated by: https://github.com/angular-threejs/gltf
Command: npx angular-three-gltf&#64;2.0.5 src/components/scenes/reuse-gltf-demo/shoe.gltf -o src/components/scenes/reuse-gltf-demo/shoe.ts --selector app-shoe --name Shoe --shadows --importattribute 
**/

import {
	ChangeDetectionStrategy,
	Component,
	CUSTOM_ELEMENTS_SCHEMA,
	effect,
	ElementRef,
	inject,
	input,
	viewChild,
} from '@angular/core';
import { extend, NgtObjectEvents, type NgtThreeElements } from 'angular-three';
import { injectGLTF } from 'angular-three-soba/loaders';
import type * as THREE from 'three';
import { Group, Mesh } from 'three';
import type { GLTF } from 'three-stdlib';

// @ts-expect-error - import .glb/.gltf file
import ShoeGLTF from './shoe.gltf' with { loader: 'file' };

export type ShoeGLTFGLTFResult = GLTF & {
	nodes: {
		shoe: THREE.Mesh;
		shoe_1: THREE.Mesh;
		shoe_2: THREE.Mesh;
		shoe_3: THREE.Mesh;
		shoe_4: THREE.Mesh;
		shoe_5: THREE.Mesh;
		shoe_6: THREE.Mesh;
		shoe_7: THREE.Mesh;
	};
	materials: {
		laces: THREE.MeshStandardMaterial;
		mesh: THREE.MeshStandardMaterial;
		caps: THREE.MeshStandardMaterial;
		inner: THREE.MeshStandardMaterial;
		sole: THREE.MeshStandardMaterial;
		stripes: THREE.MeshStandardMaterial;
		band: THREE.MeshStandardMaterial;
		patch: THREE.MeshStandardMaterial;
	};
};

@Component({
	selector: 'app-shoe',
	template: `
		@if (gltf(); as gltf) {
			<ngt-group #model [parameters]="options()" [dispose]="null">
				<ngt-mesh
					castShadow
					receiveShadow
					[geometry]="gltf.nodes.shoe.geometry"
					[material]="gltf.materials.laces"
				/>
				<ngt-mesh castShadow receiveShadow [geometry]="gltf.nodes.shoe_1.geometry">
					<ngt-mesh-standard-material [parameters]="gltf.materials.mesh" [color]="color()" />
				</ngt-mesh>
				<ngt-mesh
					castShadow
					receiveShadow
					[geometry]="gltf.nodes.shoe_2.geometry"
					[material]="gltf.materials.caps"
				/>
				<ngt-mesh
					castShadow
					receiveShadow
					[geometry]="gltf.nodes.shoe_3.geometry"
					[material]="gltf.materials.inner"
				/>
				<ngt-mesh
					castShadow
					receiveShadow
					[geometry]="gltf.nodes.shoe_4.geometry"
					[material]="gltf.materials.sole"
				/>
				<ngt-mesh
					castShadow
					receiveShadow
					[geometry]="gltf.nodes.shoe_5.geometry"
					[material]="gltf.materials.stripes"
				/>
				<ngt-mesh
					castShadow
					receiveShadow
					[geometry]="gltf.nodes.shoe_6.geometry"
					[material]="gltf.materials.band"
				/>
				<ngt-mesh
					castShadow
					receiveShadow
					[geometry]="gltf.nodes.shoe_7.geometry"
					[material]="gltf.materials.patch"
				/>

				<ng-content />
			</ngt-group>
		}
	`,
	hostDirectives: [
		{
			directive: NgtObjectEvents,
			outputs: [
				'click',
				'dblclick',
				'contextmenu',
				'pointerup',
				'pointerdown',
				'pointerover',
				'pointerout',
				'pointerenter',
				'pointerleave',
				'pointermove',
				'pointermissed',
				'pointercancel',
				'wheel',
			],
		},
	],
	schemas: [CUSTOM_ELEMENTS_SCHEMA],
	changeDetection: ChangeDetectionStrategy.OnPush,
})
export class Shoe {
	protected readonly Math = Math;

	options = input({} as Partial<NgtThreeElements['ngt-group']>);
	color = input.required<string>();

	modelRef = viewChild<ElementRef<Group>>('model');

	protected gltf = injectGLTF<ShoeGLTFGLTFResult>(() => ShoeGLTF);

	constructor() {
		extend({ Group, Mesh });

		const objectEvents = inject(NgtObjectEvents, { host: true });
		effect(() => {
			const model = this.modelRef()?.nativeElement;
			if (!model) return;

			objectEvents.ngtObjectEvents.set(model);
		});
	}
}
